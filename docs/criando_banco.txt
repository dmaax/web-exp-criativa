doc desse negocio -> https://www.postgresql.org/docs/current/

criacao -> https://www.postgresql.org/docs/current/tutorial-createdb.html

no .env -> DATABASE_URL=postgres://app_user:senha123@localhost/meubanco

 ___________________________________
|comandos para colocar no terminal  |
|___________________________________|
                    |
                    v

sudo -u postgres psql

CREATE USER root_app WITH PASSWORD 'senha_root';

CREATE USER escritor_app WITH PASSWORD 'senha_escritor';

CREATE USER editor_app WITH PASSWORD 'senha_editor';

CREATE DATABASE projeto_rust OWNER root_app;

\c projeto_rust

GRANT ALL PRIVILEGES ON DATABASE projeto_rust TO root_app;

GRANT CONNECT ON DATABASE projeto_rust TO escritor_app;

GRANT CONNECT ON DATABASE projeto_rust TO editor_app;

GRANT CONNECT ON DATABASE projeto_rust TO editor_app;

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    cpf VARCHAR(12) NOT NULL UNIQUE,
    data_nascimento VARCHAR(10) NOT NULL,
    telefone VARCHAR(16) NOT NULL,
    senha_hash TEXT NOT NULL,
    cep VARCHAR(9) NOT NULL,
    codigo_2fa VARCHAR(32) NOT NULL
);

GRANT SELECT, INSERT ON usuarios TO escritor_app;

GRANT SELECT, UPDATE ON usuarios TO editor_app;

REVOKE DELETE ON usuarios FROM PUBLIC;

__________________________________________________________________________________________________________________________________________________________________
EXPLICACAO ( chat gpt )

Com o comando sudo -u postgres psql você acessa o PostgreSQL como superusuário.

Depois, criamos os usuários que vão interagir com o banco:
CREATE USER root_app WITH PASSWORD 'senha_root';
CREATE USER escritor_app WITH PASSWORD 'senha_escritor';
CREATE USER editor_app WITH PASSWORD 'senha_editor';

Esses usuários têm funções diferentes: o root_app será o dono do banco, o escritor_app pode adicionar e ler dados, e o editor_app pode editar e ler dados.

Criamos o banco de dados com CREATE DATABASE projeto_rust OWNER root_app; definindo o root_app como dono do banco.

Para entrar no banco recém-criado, usamos \c projeto_rust.

Agora concedemos as permissões básicas:
GRANT ALL PRIVILEGES ON DATABASE projeto_rust TO root_app; dá todos os privilégios ao root.
GRANT CONNECT ON DATABASE projeto_rust TO escritor_app; e
GRANT CONNECT ON DATABASE projeto_rust TO editor_app; permitem que os outros dois usuários consigam se conectar ao banco.

Criamos então a tabela principal do sistema com:

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    cpf VARCHAR(12) NOT NULL UNIQUE,
    data_nascimento VARCHAR(10) NOT NULL,
    telefone VARCHAR(16) NOT NULL,
    senha_hash TEXT NOT NULL,
    cep VARCHAR(9) NOT NULL,
    codigo_2fa VARCHAR(32) NOT NULL
);

Essa tabela armazena os dados dos usuários com validações básicas, como campos únicos e obrigatórios.

Depois disso, configuramos os acessos aos dados:
GRANT SELECT, INSERT ON usuarios TO escritor_app; permite que o usuário escritor possa apenas ler e adicionar dados.
GRANT SELECT, UPDATE ON usuarios TO editor_app; permite que o editor leia e edite dados, mas não apague.

Por fim, usamos REVOKE DELETE ON usuarios FROM PUBLIC; para garantir que nenhum usuário genérico (sem permissão explícita) possa apagar registros dessa tabela.
__________________________________________________________________________________________________________________________________________________________________


no .env colocar essas credencis com suas respectivas senhas corretas
# usuário com todos os privilégios
DB_ROOT_URL=postgres://root_app:<coloca a senha do root>@localhost/projeto_rust

# usuário que só pode adicionar e ler
DB_ESCRITOR_URL=postgres://escritor_app:<coloca a senha>@localhost/projeto_rust

# usuário que pode editar e ler
DB_EDITOR_URL=postgres://editor_app:<coloca a senha>@localhost/projeto_rust

DATABASE_URL=

__________________________________________________________________________________________________________________________________________________________________

depois gera o diesel.toml 

diesel setup

depois gerar a pasta migration ( a gente ja criou entao depende do caso, como estamos usando outro banco n precisa desse)

diesel migration generate criar_usuarios 

