comandos 2.0
----------------------------------------------------------------------------------------------------
sudo -u postgres psql

-- Criar usuários com permissões específicas
CREATE USER root_app WITH PASSWORD 'senha_root';
CREATE USER escritor_app WITH PASSWORD 'senha_escritor';
CREATE USER editor_app WITH PASSWORD 'senha_editor';

-- Criar banco de dados com root como dono
CREATE DATABASE projeto_rust OWNER root_app;

-- Conectar ao banco de dados
\c projeto_rust

-- Dar permissões no banco
GRANT ALL PRIVILEGES ON DATABASE projeto_rust TO root_app;
GRANT CONNECT ON DATABASE projeto_rust TO escritor_app;
GRANT CONNECT ON DATABASE projeto_rust TO editor_app;

-- Alterar o dono do schema público e dar permissões
ALTER SCHEMA public OWNER TO escritor_app;
GRANT ALL ON SCHEMA public TO escritor_app;

\q

--------------------------------------------------

# Instalar o Diesel com suporte ao PostgreSQL
cargo install diesel_cli --no-default-features --features postgres

# Inicializar o diesel
diesel setup

diesel migration generate criar_usuarios 

------------------------------------------------------
dentro do up
------------------------------------------------------
-- Your SQL goes here
-- Tabela de usuários
CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    cpf VARCHAR(12) NOT NULL UNIQUE,
    data_nascimento VARCHAR(10) NOT NULL,
    telefone VARCHAR(16) NOT NULL,
    senha_hash TEXT NOT NULL,
    cep VARCHAR(9) NOT NULL,
    codigo_2fa VARCHAR(32) NOT NULL
);

GRANT SELECT, INSERT ON usuarios TO escritor_app;
GRANT SELECT, UPDATE ON usuarios TO editor_app;
REVOKE DELETE ON usuarios FROM PUBLIC;

-- Tabela de contas (ligada a usuários)
CREATE TABLE contas (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL,
    saldo VARCHAR(20) NOT NULL DEFAULT '0.00',
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

GRANT SELECT, INSERT ON contas TO escritor_app;
GRANT SELECT, UPDATE ON contas TO editor_app;
REVOKE DELETE ON contas FROM PUBLIC;

-- Tabela de cartões (ligada a contas)
CREATE TABLE cartoes (
    id SERIAL PRIMARY KEY,
    conta_id INTEGER NOT NULL,
    numero_cartao VARCHAR(30) NOT NULL UNIQUE,
    data_cartao VARCHAR(8) NOT NULL,
    codigo_cartao VARCHAR(3) NOT NULL,
    saldo_disponivel VARCHAR(20) NOT NULL DEFAULT '10000.00',
    saldo_usado VARCHAR(20) NOT NULL DEFAULT '0.00',
    FOREIGN KEY (conta_id) REFERENCES contas(id) ON DELETE CASCADE
);

GRANT SELECT, INSERT ON cartoes TO escritor_app;
GRANT SELECT, UPDATE ON cartoes TO editor_app;
REVOKE DELETE ON cartoes FROM PUBLIC;

-- Tabela de empréstimos (ligada a contas)
CREATE TABLE emprestimos (
    id SERIAL PRIMARY KEY,
    conta_id INTEGER NOT NULL,
    valor_disponivel VARCHAR(20) NOT NULL DEFAULT '0.00',
    valor_emprestado VARCHAR(20) NOT NULL DEFAULT '0.00',
    FOREIGN KEY (conta_id) REFERENCES contas(id) ON DELETE CASCADE
);

GRANT SELECT, INSERT ON emprestimos TO escritor_app;
GRANT SELECT, UPDATE ON emprestimos TO editor_app;
REVOKE DELETE ON emprestimos FROM PUBLIC;

-- Tabela de extratos (ligada a contas)
CREATE TABLE extratos (
    id SERIAL PRIMARY KEY,
    conta_id INTEGER NOT NULL,
    nome_compra VARCHAR(100) NOT NULL,
    valor VARCHAR(20) NOT NULL,
    FOREIGN KEY (conta_id) REFERENCES contas(id) ON DELETE CASCADE
);

GRANT SELECT, INSERT ON extratos TO escritor_app;
GRANT SELECT, UPDATE ON extratos TO editor_app;
REVOKE DELETE ON extratos FROM PUBLIC;
-------------------------------------------------------------------------
diesel migration run

-------------------------------------------------------------------------
aq esta o models por duvidas
--------------------------------------------------------------------------
use serde::{Deserialize, Serialize};
use diesel::Queryable;

#[derive(Queryable, Serialize, Deserialize)]
pub struct Cartao {
    pub id: i32,
    pub conta_id: i32,
    pub numero_cartao: String,
    pub data_cartao: String,
    pub codigo_cartao: String,
    pub saldo_disponivel: String,
    pub saldo_usado: String,
}

#[derive(Queryable, Serialize, Deserialize)]
pub struct Conta {
    pub id: i32,
    pub usuario_id: i32,
    pub saldo: String,
}

#[derive(Queryable, Serialize, Deserialize)]
pub struct Emprestimo {
    pub id: i32,
    pub conta_id: i32,
    pub valor_disponivel: String,
    pub valor_emprestado: String,
}

#[derive(Queryable, Serialize, Deserialize)]
pub struct Extrato {
    pub id: i32,
    pub conta_id: i32,
    pub nome_compra: String,
    pub valor: String,
}

#[derive(Queryable, Serialize, Deserialize)]
pub struct Usuario {
    pub id: i32,
    pub nome: String,
    pub email: String,
    pub cpf: String,
    pub data_nascimento: String,
    pub telefone: String,
    pub senha_hash: String,
    pub cep: String,
    pub codigo_2fa: String,
}


